Commit: Introduce explicit selection of std::xxx, nonstd::xxx


Header:

// xxx-lite configuration:

#define xxx_XXX_DEFAULT  0
#define xxx_XXX_NONSTD   1
#define xxx_XXX_STD      2

#if !defined( xxx_CONFIG_SELECT_XXX )
# define xxx_CONFIG_SELECT_XXX  ( xxx_HAVE_STD_XXX ? xxx_XXX_STD : xxx_XXX_NONSTD )
#endif

// C++ language version detection (C++20 is speculative):
// Note: VC14.0/1900 (VS2015) lacks too much from C++14.

#ifndef   xxx_CPLUSPLUS
# if defined(_MSVC_LANG ) && !defined(__clang__)
#  define xxx_CPLUSPLUS  (_MSC_VER == 1900 ? 201103L : _MSVC_LANG )
# else
#  define xxx_CPLUSPLUS  __cplusplus
# endif
#endif

#define xxx_CPP98_OR_GREATER  ( xxx_CPLUSPLUS >= 199711L )
#define xxx_CPP11_OR_GREATER  ( xxx_CPLUSPLUS >= 201103L )
#define xxx_CPP14_OR_GREATER  ( xxx_CPLUSPLUS >= 201402L )
#define xxx_CPP17_OR_GREATER  ( xxx_CPLUSPLUS >= 201703L )
#define xxx_CPP20_OR_GREATER  ( xxx_CPLUSPLUS >= 202000L )

// use C++17 std::xxx if available and requested:

#if xxx_CPP17_OR_GREATER && defined(__has_include )
# if __has_include( <xxx> )
#  define xxx_HAVE_STD_XXX  1
# else
#  define xxx_HAVE_STD_XXX  0
# endif
#else
# define  xxx_HAVE_STD_XXX  0
#endif

#define xxx_USES_STD_XXX  ( (xxx_CONFIG_SELECT_XXX == xxx_XXX_STD) || ((xxx_CONFIG_SELECT_XXX == xxx_XXX_DEFAULT) && xxx_HAVE_STD_XXX) )

// Using std::xxx:

#if xxx_USES_STD_XXX


Readme:

### Select `std::xxx` or `nonstd::xxx`
At default, *xxx lite* uses `std::xxx` if it is available and lets you use it via namespace `nonstd`. You can however override this default and explicitly request to use `std::xxx` or xxx lite's `nonstd::xxx` as `nonstd::xxx` via the following macros.

-D<b>xxx\_CONFIG\_SELECT\_XXX</b>=xxx_XXX_DEFAULT  
Define this to `xxx_XXX_STD` to select `std::xxx` as `nonstd::xxx`. Define this to `xxx_XXX_LITE` to select `nonstd::xxx` as `nonstd::xxx`. Default is undefined, which has the same effect as defining to `xxx_XXX_DEFAULT`.
